import logging
import os
import secrets
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from sqlalchemy.future import select
from sqlalchemy import delete
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
from database import AsyncSessionLocal, AuthorizedUser, OTPSession
#import bot.init_db_async

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ /login, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

async def handle_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è OTP-–∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with AsyncSessionLocal() as db:
            query = select(AuthorizedUser).where(AuthorizedUser.telegram_id == update.effective_user.id)
            result = await db.execute(query)
            user = result.scalars().first()

            if user:
                otp = secrets.token_urlsafe(6)[:8].upper()
                expires_at = datetime.utcnow() + timedelta(minutes=10)

                otp_session = OTPSession(telegram_id=user.telegram_id, otp=otp, expires_at=expires_at)
                db.add(otp_session)
                await db.commit()

                await update.message.reply_text(
                    f"üîë –í—Ä–µ–º–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                    f"üÜî Telegram ID: {user.telegram_id}\n"
                    f"üî¢ OTP: {otp}\n"
                    f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç"
                )
            else:
                await update.message.reply_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_login: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞")

async def cleanup_otp(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö OTP-–∫–æ–¥–æ–≤"""
    async with AsyncSessionLocal() as db:
        await db.execute(delete(OTPSession).where(OTPSession.expires_at < datetime.utcnow()))
        await db.commit()

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    if context.args and len(context.args) == 1:
        try:
            telegram_id = int(context.args[0])
            async with AsyncSessionLocal() as db:
                query = select(AuthorizedUser).where(AuthorizedUser.telegram_id == telegram_id)
                result = await db.execute(query)
                existing_user = result.scalars().first()

                if existing_user:
                    await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return

                user = AuthorizedUser(telegram_id=telegram_id)
                db.add(user)
                await db.commit()
                await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_user: {e}", exc_info=True)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <telegram_id>")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with AsyncSessionLocal() as db:
            result = await db.execute(select(AuthorizedUser))
            users = result.scalars().all()

            if users:
                users_list = "\n".join([f"üë§ ID: {u.telegram_id}" for u in users])
                await update.message.reply_text(f"üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_list}")
            else:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_users: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def verify_otp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ OTP-–∫–æ–¥–∞"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /verify <otp>")
        return

    otp_input = context.args[0]

    try:
        async with AsyncSessionLocal() as db:
            query = select(OTPSession).where(OTPSession.otp == otp_input, OTPSession.expires_at > datetime.utcnow())
            result = await db.execute(query)
            session = result.scalars().first()

            if session:
                await db.execute(delete(OTPSession).where(OTPSession.otp == otp_input))
                await db.commit()
                await update.message.reply_text("‚úÖ OTP-–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π OTP-–∫–æ–¥.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ verify_otp: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ OTP-–∫–æ–¥–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        logger.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(bot_token).build()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ OTP-–∫–æ–¥–æ–≤
    job_queue = application.job_queue
    job_queue.run_repeating(cleanup_otp, interval=3600)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("login", handle_login))
    application.add_handler(CommandHandler("adduser", add_user))
    application.add_handler(CommandHandler("listusers", list_users))
    application.add_handler(CommandHandler("verify", verify_otp))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await init_db_async()
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
